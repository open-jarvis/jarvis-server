#!/usr/bin/python3

#
# Copyright (c) 2020 by Philipp Scheer. All Rights Reserved.
#

import sys, os, json


# functions
def print_usage():
	print("Usage: jarvis <command> <argument>")
	print("")
	print(" command           | argument")
	print("-------------------+-------------------------------------------")
	print(" add-app           | https://github.com/jarvis-apps/headset")
	print(" remove-app        | headset")
	# print(" add-local-app     | /home/user/Downloads/<app>")
	print(" list-apps         | ")
	exit(0)
def do_action(print_str, shell_command, show_output=True, on_fail="failed!", on_success="done!", exit_on_fail=True):
	print(print_str + "... ", end="")
	if not show_output:
		shell_command += " &> /dev/null"
	if not os.system(shell_command) == 0:
		print(on_fail)
		if exit_on_fail:
			exit(1)
		return False
	else:
		print(on_success)
		return True

class JSONConfig:
	def __init__(self, config_file):
		self.file = config_file
		self.path = os.path.dirname(os.path.abspath(self.file))
	def exists(self):
		return os.path.exists(self.file)
	def create(self):
		if not os.path.exists(self.path):
			os.makedirs(self.path)
			with open(self.file, "w") as f:
				f.write(json.dumps({}))
	def get(self):
		cnf = {}
		try:
			if not self.exists():
				self.create()
			with open(self.file, "r") as f:
				cnf = json.loads(f.read())
		except Exception as e:
			pass
		return cnf
	def set_key(self, key, value):
		cnf = self.get()
		cnf[key] = value
		with open(self.file, "w") as f:
			f.write(json.dumps(cnf))
	def get_key(self, key, or_else):
		cnf = self.get()
		if key in cnf:
			return cnf[key]
		else:
			return or_else


# check usage
if len(sys.argv) == 1 or "--help" in sys.argv or "-h" in sys.argv:
	print_usage()


# program
command = sys.argv[1]
argument = sys.argv[2] if len(sys.argv) > 2 else None


# load jarvis configuration
usr = os.getlogin()
cnf = JSONConfig(f"/home/{usr}/.config/jarvis/main.conf")
if not cnf.exists():
	print(f"Jarvis not installed for user {usr}")
	exit(1)

APP_DIR = cnf.get_key("app_dir", None)
if APP_DIR is None:
	root_dir = cnf.get_key("root_dir", None)
	if root_dir is None:
		print("Jarvis is not setup yet!")
		exit(1)
	APP_DIR = f"{APP_DIR}/apps"

if command == "add-app":
	if argument is None:
		print_usage()
	app_name = argument.split("/")[-1]
	do_action(f"clone git repository ({app_name})", f"git clone {argument} {APP_DIR}/{app_name}")
	res = do_action(f"running setup script at {APP_DIR}/{app_name}/system/setup.py", f"sudo python3 {APP_DIR}/{app_name}/system/setup.py")
	if res:
		print("successfully setup app")
	else:
		print("failed to execute setup script")
		do_action("cleaning up", f"rm -rf {APP_DIR}/{app_name}")


print("--- done ---")

